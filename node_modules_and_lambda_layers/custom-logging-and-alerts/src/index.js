// Will send a message to a sns topic that will send out a text, email, slack or whatever else we want to.
// We can bypass sns and just send to what we want but putting it into a sns topic allows us to quickly
// add or change who or what the alert message goes to
// enum LogLevel {
//     ERROR, WARN, INFO, DEBUG
// }
/**
 * This is equivalent to:
 * type LogLevelStrings = 'ERROR' | 'WARN' | 'INFO' | 'DEBUG';
 */
// type LogLevelStrings = keyof typeof LogLevel;
// Need to figure out a proper return type for console logs
// returning void or or any is not cool
var sendAlertMessage = function (message) {
    return console.log("Sending alert message for logs to " + message + " group");
};
var formatLogMessage = function (message) {
    var err = new Error(message);
    var errorStack = err.stack.split("\n")[2];
    var functionName = errorStack.split(" ")[5];
    var regex = /\((.*):(\d+):(\d+)\)$/;
    var absolutePath = regex.exec(errorStack);
    var fileName = absolutePath[1].split("/").pop();
    var lineNumber = Number(absolutePath[2]);
    var logMessage = err.message;
    var logStackDetails = {
        fileName: fileName,
        functionName: functionName,
        lineNumber: lineNumber,
        logMessage: logMessage
    };
    return logStackDetails;
};
var error = function (message, statusCode) {
    if (statusCode === void 0) { statusCode = 400; }
    var logStackDetails = formatLogMessage(message);
    var fileName = logStackDetails.fileName, functionName = logStackDetails.functionName, lineNumber = logStackDetails.lineNumber, logMessage = logStackDetails.logMessage;
    var formattedLogMessage = {
        messageType: "Error",
        fileName: fileName,
        functionName: functionName,
        lineNumber: lineNumber,
        logMessage: logMessage,
        statusCode: statusCode
    };
    sendAlertMessage(formattedLogMessage);
    return console.error(formattedLogMessage);
};
var warning = function (message, statusCode) {
    if (statusCode === void 0) { statusCode = 200; }
    var logStackDetails = formatLogMessage(message);
    var fileName = logStackDetails.fileName, functionName = logStackDetails.functionName, lineNumber = logStackDetails.lineNumber, logMessage = logStackDetails.logMessage;
    var formattedLogMessage = {
        messageType: "Warning",
        fileName: fileName,
        functionName: functionName,
        lineNumber: lineNumber,
        logMessage: logMessage,
        statusCode: statusCode
    };
    sendAlertMessage(formattedLogMessage);
    return console.warn(formattedLogMessage);
};
var info = function (message, statusCode) {
    if (statusCode === void 0) { statusCode = 200; }
    var logStackDetails = formatLogMessage(message);
    var fileName = logStackDetails.fileName, functionName = logStackDetails.functionName, lineNumber = logStackDetails.lineNumber, logMessage = logStackDetails.logMessage;
    var formattedLogMessage = {
        messageType: "Info",
        fileName: fileName,
        functionName: functionName,
        lineNumber: lineNumber,
        logMessage: logMessage,
        statusCode: statusCode
    };
    return console.info(formattedLogMessage);
};
module.exports = { info: info, warning: warning, error: error };

// Will send a message to a sns topic that will send out a text, email, slack or whatever else we want to.
// We can bypass sns and just send to what we want but putting it into a sns topic allows us to quickly
// add or change who or what the alert message goes to

interface IFormattedLogMessage {
    messageType: string;
    fileName: string;
    functionName: string;
    lineNumber: number;
    logMessage: string;
    statusCode: number;
}

interface ILogStackDetails {
    fileName: string;
    functionName: string;
    lineNumber: number;
    logMessage: string;
}

// enum LogLevel {
//     ERROR, WARN, INFO, DEBUG
// }

/**
 * This is equivalent to:
 * type LogLevelStrings = 'ERROR' | 'WARN' | 'INFO' | 'DEBUG';
 */
// type LogLevelStrings = keyof typeof LogLevel;
// Need to figure out a proper return type for console logs
// returning void or or any is not cool
const sendAlertMessage = (message: IFormattedLogMessage): void => {
    return console.log(`Sending alert message for logs to ${message} group`);
};

const formatLogMessage = (message: string): ILogStackDetails => {
    const err: Error = new Error(message);
    const errorStack: string = err.stack.split("\n")[2];
    const functionName: string = errorStack.split(" ")[5];
    const regex: RegExp = /\((.*):(\d+):(\d+)\)$/;
    const absolutePath: RegExpExecArray = regex.exec(errorStack);
    const fileName: string = absolutePath[1].split("/").pop();
    const lineNumber: number = Number(absolutePath[2]);
    const logMessage: string = err.message;
    const logStackDetails = {
        fileName,
        functionName,
        lineNumber,
        logMessage
    };
    return logStackDetails;
};

const error = (message: string, statusCode: number = 400): void => {
    const logStackDetails = formatLogMessage(message);
    const { fileName, functionName, lineNumber, logMessage } = logStackDetails;

    const formattedLogMessage = {
        messageType: "Error",
        fileName,
        functionName,
        lineNumber,
        logMessage,
        statusCode
    };
    sendAlertMessage(formattedLogMessage);
    return console.error(formattedLogMessage);
};

const warning = (message: string, statusCode: number = 200): void => {
    const logStackDetails = formatLogMessage(message);
    const { fileName, functionName, lineNumber, logMessage } = logStackDetails;

    const formattedLogMessage = {
        messageType: "Warning",
        fileName,
        functionName,
        lineNumber,
        logMessage,
        statusCode
    };

    sendAlertMessage(formattedLogMessage);
    return console.warn(formattedLogMessage);
};

const info = (message: string, statusCode: number = 200): void => {
    const logStackDetails = formatLogMessage(message);
    const { fileName, functionName, lineNumber, logMessage } = logStackDetails;

    const formattedLogMessage = {
        messageType: "Info",
        fileName,
        functionName,
        lineNumber,
        logMessage,
        statusCode
    };
    return console.info(formattedLogMessage);
};

module.exports = { info, warning, error };
